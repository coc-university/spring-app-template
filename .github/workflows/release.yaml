name: Release Action

on:
  push:
    branches:
      - container-multistage-build
jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.releases_created }}
      release_major: ${{ steps.release.outputs.major }}
      release_minor: ${{ steps.release.outputs.minor }}
      release_patch: ${{ steps.release.outputs.patch }}
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: maven
          package-name: spring-app-template

      - name: get version number
        if: ${{ steps.release.outputs.release_created }}
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "::set-output name=version::$VERSION"
        id: jar-version

      - uses: actions/checkout@v2
      - name: Setup Docker Image Tag
        id: image-tag
        run: |
          SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date '+%Y%m%d%H%M')
          echo "SHA: $SHA"
          echo "TIMESTAMP: $TIMESTAMP"
          echo "::set-output name=image_tag::prod-${TIMESTAMP}-${SHA}"

      #      - name: run SonarQube
      #        if: ${{ steps.release.outputs.release_created }}
      #        run: |
      #          mvn sonar:sonar \
      #          -Dsonar.projectName=spring-app-template \
      #          -Dsonar.projectKey=coc-universe_spring-app-template \
      #          -Dsonar.host.url=${{ secrets.SONARQUBE_HOST }} \
      #          -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }} \
      #          -Dsonar.branch.name=main \
      #          -Dsonar.java.coveragePlugin=jacoco \
      #          -Dsonar.coverage.jacoco.xmlReportPaths=target/jacoco/jacoco.xml

      - name: Build Docker Image spring-app-template
        if: ${{ !steps.release.outputs.release_created && success() }}
        run: |
          image=ghcr.io/coc-ghcr.io/coc-university/spring-app-template
          tag=${{ steps.image-tag.outputs.image_tag }}
          echo ${{ secrets.GITHUB_TOKEN }} | docker login -u ${{ github.actor }} --password-stdin ghcr.io
          docker build -t $image:$tag .
          docker push $image:$tag

      - name: Build Docker Image spring-app-template
        if: ${{ steps.release.outputs.release_created && success() }}
        run: |
          image=ghcr.io/coc-ghcr.io/coc-university/spring-app-template
          version=${{ steps.jar-version.outputs.version }}
          tag=${{ steps.image-tag.outputs.image_tag }}
          echo ${{ secrets.GITHUB_TOKEN }} | docker login -u ${{ github.actor }} --password-stdin ghcr.io
          docker build -t $image:$version:$tag .
          docker push $image:$version:$tag